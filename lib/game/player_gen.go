package warsgame

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"wars/lib/vector"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Hook) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "end":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "End")
					return
				}
				z.End = nil
			} else {
				if z.End == nil {
					z.End = new(vector.Vect2D)
				}
				err = z.End.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "End")
					return
				}
			}
		case "vel":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Vel")
					return
				}
				z.Vel = nil
			} else {
				if z.Vel == nil {
					z.Vel = new(vector.Vect2D)
				}
				err = z.Vel.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Vel")
					return
				}
			}
		case "dist":
			z.Distance, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Distance")
				return
			}
		case "cDist":
			z.CurrentDistance, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentDistance")
				return
			}
		case "cpId":
			z.CaughtPlayerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CaughtPlayerID")
				return
			}
		case "ir":
			z.IsReturning, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsReturning")
				return
			}
		case "stuck":
			z.WallStucked, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WallStucked")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Hook) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "end"
	err = en.Append(0x87, 0xa3, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	if z.End == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.End.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "End")
			return
		}
	}
	// write "vel"
	err = en.Append(0xa3, 0x76, 0x65, 0x6c)
	if err != nil {
		return
	}
	if z.Vel == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Vel.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Vel")
			return
		}
	}
	// write "dist"
	err = en.Append(0xa4, 0x64, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Distance)
	if err != nil {
		err = msgp.WrapError(err, "Distance")
		return
	}
	// write "cDist"
	err = en.Append(0xa5, 0x63, 0x44, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.CurrentDistance)
	if err != nil {
		err = msgp.WrapError(err, "CurrentDistance")
		return
	}
	// write "cpId"
	err = en.Append(0xa4, 0x63, 0x70, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.CaughtPlayerID)
	if err != nil {
		err = msgp.WrapError(err, "CaughtPlayerID")
		return
	}
	// write "ir"
	err = en.Append(0xa2, 0x69, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsReturning)
	if err != nil {
		err = msgp.WrapError(err, "IsReturning")
		return
	}
	// write "stuck"
	err = en.Append(0xa5, 0x73, 0x74, 0x75, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WallStucked)
	if err != nil {
		err = msgp.WrapError(err, "WallStucked")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Hook) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "end"
	o = append(o, 0x87, 0xa3, 0x65, 0x6e, 0x64)
	if z.End == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.End.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "End")
			return
		}
	}
	// string "vel"
	o = append(o, 0xa3, 0x76, 0x65, 0x6c)
	if z.Vel == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Vel.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Vel")
			return
		}
	}
	// string "dist"
	o = append(o, 0xa4, 0x64, 0x69, 0x73, 0x74)
	o = msgp.AppendFloat64(o, z.Distance)
	// string "cDist"
	o = append(o, 0xa5, 0x63, 0x44, 0x69, 0x73, 0x74)
	o = msgp.AppendFloat64(o, z.CurrentDistance)
	// string "cpId"
	o = append(o, 0xa4, 0x63, 0x70, 0x49, 0x64)
	o = msgp.AppendString(o, z.CaughtPlayerID)
	// string "ir"
	o = append(o, 0xa2, 0x69, 0x72)
	o = msgp.AppendBool(o, z.IsReturning)
	// string "stuck"
	o = append(o, 0xa5, 0x73, 0x74, 0x75, 0x63, 0x6b)
	o = msgp.AppendBool(o, z.WallStucked)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Hook) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "end":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.End = nil
			} else {
				if z.End == nil {
					z.End = new(vector.Vect2D)
				}
				bts, err = z.End.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "End")
					return
				}
			}
		case "vel":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Vel = nil
			} else {
				if z.Vel == nil {
					z.Vel = new(vector.Vect2D)
				}
				bts, err = z.Vel.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Vel")
					return
				}
			}
		case "dist":
			z.Distance, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Distance")
				return
			}
		case "cDist":
			z.CurrentDistance, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentDistance")
				return
			}
		case "cpId":
			z.CaughtPlayerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CaughtPlayerID")
				return
			}
		case "ir":
			z.IsReturning, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsReturning")
				return
			}
		case "stuck":
			z.WallStucked, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WallStucked")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Hook) Msgsize() (s int) {
	s = 1 + 4
	if z.End == nil {
		s += msgp.NilSize
	} else {
		s += z.End.Msgsize()
	}
	s += 4
	if z.Vel == nil {
		s += msgp.NilSize
	} else {
		s += z.Vel.Msgsize()
	}
	s += 5 + msgp.Float64Size + 6 + msgp.Float64Size + 5 + msgp.StringPrefixSize + len(z.CaughtPlayerID) + 3 + msgp.BoolSize + 6 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Player) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "clr":
			err = z.Color.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Color")
				return
			}
		case "ja":
			z.JoinedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "JoinedAt")
				return
			}
		case "pos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
				z.Pos = nil
			} else {
				if z.Pos == nil {
					z.Pos = new(vector.Vect2D)
				}
				err = z.Pos.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
			}
		case "vel":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Vel")
					return
				}
				z.Vel = nil
			} else {
				if z.Vel == nil {
					z.Vel = new(vector.Vect2D)
				}
				err = z.Vel.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Vel")
					return
				}
			}
		case "dir":
			z.Direction, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Direction")
				return
			}
		case "cc":
			z.ChaseCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ChaseCount")
				return
			}
		case "lca":
			z.LastChasedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "LastChasedAt")
				return
			}
		case "bl":
			z.Blinking, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Blinking")
				return
			}
		case "bla":
			z.BlinkedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "BlinkedAt")
				return
			}
		case "hook":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
				z.Hook = nil
			} else {
				if z.Hook == nil {
					z.Hook = new(Hook)
				}
				err = z.Hook.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
			}
		case "ha":
			z.HookedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "HookedAt")
				return
			}
		case "cbId":
			z.CaughtByID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CaughtByID")
				return
			}
		case "ish":
			z.IsHooked, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsHooked")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Player) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 15
	// write "id"
	err = en.Append(0x8f, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "clr"
	err = en.Append(0xa3, 0x63, 0x6c, 0x72)
	if err != nil {
		return
	}
	err = z.Color.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Color")
		return
	}
	// write "ja"
	err = en.Append(0xa2, 0x6a, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.JoinedAt)
	if err != nil {
		err = msgp.WrapError(err, "JoinedAt")
		return
	}
	// write "pos"
	err = en.Append(0xa3, 0x70, 0x6f, 0x73)
	if err != nil {
		return
	}
	if z.Pos == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Pos.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Pos")
			return
		}
	}
	// write "vel"
	err = en.Append(0xa3, 0x76, 0x65, 0x6c)
	if err != nil {
		return
	}
	if z.Vel == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Vel.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Vel")
			return
		}
	}
	// write "dir"
	err = en.Append(0xa3, 0x64, 0x69, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Direction)
	if err != nil {
		err = msgp.WrapError(err, "Direction")
		return
	}
	// write "cc"
	err = en.Append(0xa2, 0x63, 0x63)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ChaseCount)
	if err != nil {
		err = msgp.WrapError(err, "ChaseCount")
		return
	}
	// write "lca"
	err = en.Append(0xa3, 0x6c, 0x63, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.LastChasedAt)
	if err != nil {
		err = msgp.WrapError(err, "LastChasedAt")
		return
	}
	// write "bl"
	err = en.Append(0xa2, 0x62, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Blinking)
	if err != nil {
		err = msgp.WrapError(err, "Blinking")
		return
	}
	// write "bla"
	err = en.Append(0xa3, 0x62, 0x6c, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BlinkedAt)
	if err != nil {
		err = msgp.WrapError(err, "BlinkedAt")
		return
	}
	// write "hook"
	err = en.Append(0xa4, 0x68, 0x6f, 0x6f, 0x6b)
	if err != nil {
		return
	}
	if z.Hook == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Hook.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Hook")
			return
		}
	}
	// write "ha"
	err = en.Append(0xa2, 0x68, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.HookedAt)
	if err != nil {
		err = msgp.WrapError(err, "HookedAt")
		return
	}
	// write "cbId"
	err = en.Append(0xa4, 0x63, 0x62, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.CaughtByID)
	if err != nil {
		err = msgp.WrapError(err, "CaughtByID")
		return
	}
	// write "ish"
	err = en.Append(0xa3, 0x69, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsHooked)
	if err != nil {
		err = msgp.WrapError(err, "IsHooked")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Player) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 15
	// string "id"
	o = append(o, 0x8f, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ID)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "clr"
	o = append(o, 0xa3, 0x63, 0x6c, 0x72)
	o, err = z.Color.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Color")
		return
	}
	// string "ja"
	o = append(o, 0xa2, 0x6a, 0x61)
	o = msgp.AppendInt64(o, z.JoinedAt)
	// string "pos"
	o = append(o, 0xa3, 0x70, 0x6f, 0x73)
	if z.Pos == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Pos.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Pos")
			return
		}
	}
	// string "vel"
	o = append(o, 0xa3, 0x76, 0x65, 0x6c)
	if z.Vel == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Vel.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Vel")
			return
		}
	}
	// string "dir"
	o = append(o, 0xa3, 0x64, 0x69, 0x72)
	o = msgp.AppendString(o, z.Direction)
	// string "cc"
	o = append(o, 0xa2, 0x63, 0x63)
	o = msgp.AppendInt(o, z.ChaseCount)
	// string "lca"
	o = append(o, 0xa3, 0x6c, 0x63, 0x61)
	o = msgp.AppendInt64(o, z.LastChasedAt)
	// string "bl"
	o = append(o, 0xa2, 0x62, 0x6c)
	o = msgp.AppendBool(o, z.Blinking)
	// string "bla"
	o = append(o, 0xa3, 0x62, 0x6c, 0x61)
	o = msgp.AppendInt64(o, z.BlinkedAt)
	// string "hook"
	o = append(o, 0xa4, 0x68, 0x6f, 0x6f, 0x6b)
	if z.Hook == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Hook.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Hook")
			return
		}
	}
	// string "ha"
	o = append(o, 0xa2, 0x68, 0x61)
	o = msgp.AppendInt64(o, z.HookedAt)
	// string "cbId"
	o = append(o, 0xa4, 0x63, 0x62, 0x49, 0x64)
	o = msgp.AppendString(o, z.CaughtByID)
	// string "ish"
	o = append(o, 0xa3, 0x69, 0x73, 0x68)
	o = msgp.AppendBool(o, z.IsHooked)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Player) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "clr":
			bts, err = z.Color.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Color")
				return
			}
		case "ja":
			z.JoinedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JoinedAt")
				return
			}
		case "pos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Pos = nil
			} else {
				if z.Pos == nil {
					z.Pos = new(vector.Vect2D)
				}
				bts, err = z.Pos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
			}
		case "vel":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Vel = nil
			} else {
				if z.Vel == nil {
					z.Vel = new(vector.Vect2D)
				}
				bts, err = z.Vel.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Vel")
					return
				}
			}
		case "dir":
			z.Direction, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Direction")
				return
			}
		case "cc":
			z.ChaseCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChaseCount")
				return
			}
		case "lca":
			z.LastChasedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastChasedAt")
				return
			}
		case "bl":
			z.Blinking, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Blinking")
				return
			}
		case "bla":
			z.BlinkedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlinkedAt")
				return
			}
		case "hook":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Hook = nil
			} else {
				if z.Hook == nil {
					z.Hook = new(Hook)
				}
				bts, err = z.Hook.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
			}
		case "ha":
			z.HookedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HookedAt")
				return
			}
		case "cbId":
			z.CaughtByID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CaughtByID")
				return
			}
		case "ish":
			z.IsHooked, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsHooked")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Player) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + z.Color.Msgsize() + 3 + msgp.Int64Size + 4
	if z.Pos == nil {
		s += msgp.NilSize
	} else {
		s += z.Pos.Msgsize()
	}
	s += 4
	if z.Vel == nil {
		s += msgp.NilSize
	} else {
		s += z.Vel.Msgsize()
	}
	s += 4 + msgp.StringPrefixSize + len(z.Direction) + 3 + msgp.IntSize + 4 + msgp.Int64Size + 3 + msgp.BoolSize + 4 + msgp.Int64Size + 5
	if z.Hook == nil {
		s += msgp.NilSize
	} else {
		s += z.Hook.Msgsize()
	}
	s += 3 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.CaughtByID) + 4 + msgp.BoolSize
	return
}
