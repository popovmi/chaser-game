package warsgame

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"wars/lib/vector"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Brick) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
				z.Pos = nil
			} else {
				if z.Pos == nil {
					z.Pos = new(vector.Vect2D)
				}
				err = z.Pos.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
			}
		case "w":
			z.W, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "W")
				return
			}
		case "h":
			z.H, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "H")
				return
			}
		case "a":
			z.A, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Brick) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "pos"
	err = en.Append(0x84, 0xa3, 0x70, 0x6f, 0x73)
	if err != nil {
		return
	}
	if z.Pos == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Pos.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Pos")
			return
		}
	}
	// write "w"
	err = en.Append(0xa1, 0x77)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.W)
	if err != nil {
		err = msgp.WrapError(err, "W")
		return
	}
	// write "h"
	err = en.Append(0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.H)
	if err != nil {
		err = msgp.WrapError(err, "H")
		return
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.A)
	if err != nil {
		err = msgp.WrapError(err, "A")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Brick) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "pos"
	o = append(o, 0x84, 0xa3, 0x70, 0x6f, 0x73)
	if z.Pos == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Pos.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Pos")
			return
		}
	}
	// string "w"
	o = append(o, 0xa1, 0x77)
	o = msgp.AppendFloat64(o, z.W)
	// string "h"
	o = append(o, 0xa1, 0x68)
	o = msgp.AppendFloat64(o, z.H)
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendFloat64(o, z.A)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Brick) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Pos = nil
			} else {
				if z.Pos == nil {
					z.Pos = new(vector.Vect2D)
				}
				bts, err = z.Pos.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pos")
					return
				}
			}
		case "w":
			z.W, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "W")
				return
			}
		case "h":
			z.H, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "H")
				return
			}
		case "a":
			z.A, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Brick) Msgsize() (s int) {
	s = 1 + 4
	if z.Pos == nil {
		s += msgp.NilSize
	} else {
		s += z.Pos.Msgsize()
	}
	s += 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.Float64Size
	return
}
