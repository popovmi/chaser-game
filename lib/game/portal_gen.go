package game

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Portal) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pos":
			err = z.Pos.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Pos")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Portal) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "pos"
	err = en.Append(0x81, 0xa3, 0x70, 0x6f, 0x73)
	if err != nil {
		return
	}
	err = z.Pos.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pos")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Portal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "pos"
	o = append(o, 0x81, 0xa3, 0x70, 0x6f, 0x73)
	o, err = z.Pos.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pos")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Portal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pos":
			bts, err = z.Pos.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pos")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Portal) Msgsize() (s int) {
	s = 1 + 4 + z.Pos.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PortalLink) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p1":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "P1")
					return
				}
				z.P1 = nil
			} else {
				if z.P1 == nil {
					z.P1 = new(Portal)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "P1")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "P1")
						return
					}
					switch msgp.UnsafeString(field) {
					case "pos":
						err = z.P1.Pos.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "P1", "Pos")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "P1")
							return
						}
					}
				}
			}
		case "p2":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "P2")
					return
				}
				z.P2 = nil
			} else {
				if z.P2 == nil {
					z.P2 = new(Portal)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "P2")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "P2")
						return
					}
					switch msgp.UnsafeString(field) {
					case "pos":
						err = z.P2.Pos.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "P2", "Pos")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "P2")
							return
						}
					}
				}
			}
		case "lu":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "LastUsed")
				return
			}
			if z.LastUsed == nil {
				z.LastUsed = make(map[string]time.Time, zb0004)
			} else if len(z.LastUsed) > 0 {
				for key := range z.LastUsed {
					delete(z.LastUsed, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0001 string
				var za0002 time.Time
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "LastUsed")
					return
				}
				za0002, err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "LastUsed", za0001)
					return
				}
				z.LastUsed[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PortalLink) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "p1"
	err = en.Append(0x83, 0xa2, 0x70, 0x31)
	if err != nil {
		return
	}
	if z.P1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "pos"
		err = en.Append(0x81, 0xa3, 0x70, 0x6f, 0x73)
		if err != nil {
			return
		}
		err = z.P1.Pos.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "P1", "Pos")
			return
		}
	}
	// write "p2"
	err = en.Append(0xa2, 0x70, 0x32)
	if err != nil {
		return
	}
	if z.P2 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "pos"
		err = en.Append(0x81, 0xa3, 0x70, 0x6f, 0x73)
		if err != nil {
			return
		}
		err = z.P2.Pos.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "P2", "Pos")
			return
		}
	}
	// write "lu"
	err = en.Append(0xa2, 0x6c, 0x75)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.LastUsed)))
	if err != nil {
		err = msgp.WrapError(err, "LastUsed")
		return
	}
	for za0001, za0002 := range z.LastUsed {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "LastUsed")
			return
		}
		err = en.WriteTime(za0002)
		if err != nil {
			err = msgp.WrapError(err, "LastUsed", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PortalLink) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "p1"
	o = append(o, 0x83, 0xa2, 0x70, 0x31)
	if z.P1 == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "pos"
		o = append(o, 0x81, 0xa3, 0x70, 0x6f, 0x73)
		o, err = z.P1.Pos.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "P1", "Pos")
			return
		}
	}
	// string "p2"
	o = append(o, 0xa2, 0x70, 0x32)
	if z.P2 == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "pos"
		o = append(o, 0x81, 0xa3, 0x70, 0x6f, 0x73)
		o, err = z.P2.Pos.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "P2", "Pos")
			return
		}
	}
	// string "lu"
	o = append(o, 0xa2, 0x6c, 0x75)
	o = msgp.AppendMapHeader(o, uint32(len(z.LastUsed)))
	for za0001, za0002 := range z.LastUsed {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendTime(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PortalLink) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p1":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.P1 = nil
			} else {
				if z.P1 == nil {
					z.P1 = new(Portal)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "P1")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "P1")
						return
					}
					switch msgp.UnsafeString(field) {
					case "pos":
						bts, err = z.P1.Pos.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "P1", "Pos")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "P1")
							return
						}
					}
				}
			}
		case "p2":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.P2 = nil
			} else {
				if z.P2 == nil {
					z.P2 = new(Portal)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "P2")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "P2")
						return
					}
					switch msgp.UnsafeString(field) {
					case "pos":
						bts, err = z.P2.Pos.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "P2", "Pos")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "P2")
							return
						}
					}
				}
			}
		case "lu":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastUsed")
				return
			}
			if z.LastUsed == nil {
				z.LastUsed = make(map[string]time.Time, zb0004)
			} else if len(z.LastUsed) > 0 {
				for key := range z.LastUsed {
					delete(z.LastUsed, key)
				}
			}
			for zb0004 > 0 {
				var za0001 string
				var za0002 time.Time
				zb0004--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastUsed")
					return
				}
				za0002, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastUsed", za0001)
					return
				}
				z.LastUsed[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PortalLink) Msgsize() (s int) {
	s = 1 + 3
	if z.P1 == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + z.P1.Pos.Msgsize()
	}
	s += 3
	if z.P2 == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + z.P2.Pos.Msgsize()
	}
	s += 3 + msgp.MapHeaderSize
	if z.LastUsed != nil {
		for za0001, za0002 := range z.LastUsed {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.TimeSize
		}
	}
	return
}
