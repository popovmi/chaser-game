package game

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Direction) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Direction(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Direction) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Direction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Direction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Direction(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Direction) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Player) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "n":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "clr":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Color")
					return
				}
				z.Color = nil
			} else {
				if z.Color == nil {
					z.Color = new(RGBA)
				}
				err = z.Color.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Color")
					return
				}
			}
		case "ja":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "JoinedAt")
					return
				}
				z.JoinedAt = nil
			} else {
				if z.JoinedAt == nil {
					z.JoinedAt = new(time.Time)
				}
				*z.JoinedAt, err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "JoinedAt")
					return
				}
			}
		case "s":
			{
				var zb0002 byte
				zb0002, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = PlayerStatus(zb0002)
			}
		case "hp":
			z.HP, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
		case "pos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
				z.Position = nil
			} else {
				if z.Position == nil {
					z.Position = new(Vector)
				}
				err = z.Position.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		case "vel":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
				z.Velocity = nil
			} else {
				if z.Velocity == nil {
					z.Velocity = new(Vector)
				}
				err = z.Velocity.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		case "ang":
			z.Angle, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Angle")
				return
			}
		case "md":
			z.MoveDirection, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MoveDirection")
				return
			}
		case "rd":
			{
				var zb0003 byte
				zb0003, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "RotationDirection")
					return
				}
				z.RotationDirection = Direction(zb0003)
			}
		case "b":
			z.Boosting, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Boosting")
				return
			}
		case "kls":
			z.Kills, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Kills")
				return
			}
		case "dts":
			z.Deaths, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Deaths")
				return
			}
		case "dpos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DeathPosition")
					return
				}
				z.DeathPosition = nil
			} else {
				if z.DeathPosition == nil {
					z.DeathPosition = new(Vector)
				}
				err = z.DeathPosition.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "DeathPosition")
					return
				}
			}
		case "da":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DeadAt")
					return
				}
				z.DeadAt = nil
			} else {
				if z.DeadAt == nil {
					z.DeadAt = new(time.Time)
				}
				*z.DeadAt, err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "DeadAt")
					return
				}
			}
		case "sa":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SpawnedAt")
					return
				}
				z.SpawnedAt = nil
			} else {
				if z.SpawnedAt == nil {
					z.SpawnedAt = new(time.Time)
				}
				*z.SpawnedAt, err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "SpawnedAt")
					return
				}
			}
		case "hk":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
				z.Hook = nil
			} else {
				if z.Hook == nil {
					z.Hook = new(Hook)
				}
				err = z.Hook.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
			}
		case "hka":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "UsedHookAt")
					return
				}
				z.UsedHookAt = nil
			} else {
				if z.UsedHookAt == nil {
					z.UsedHookAt = new(time.Time)
				}
				*z.UsedHookAt, err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "UsedHookAt")
					return
				}
			}
		case "hb":
			z.HookedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "HookedBy")
				return
			}
		case "bl":
			z.Blinking, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Blinking")
				return
			}
		case "bla":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "BlinkedAt")
					return
				}
				z.BlinkedAt = nil
			} else {
				if z.BlinkedAt == nil {
					z.BlinkedAt = new(time.Time)
				}
				*z.BlinkedAt, err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "BlinkedAt")
					return
				}
			}
		case "bld":
			z.Blinked, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Blinked")
				return
			}
		case "tlp":
			z.Teleporting, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Teleporting")
				return
			}
		case "depp":
			z.FromPortalID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FromPortalID")
				return
			}
		case "arrp":
			z.ToPortalID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ToPortalID")
				return
			}
		case "tld":
			z.Teleported, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Teleported")
				return
			}
		case "tla":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TeleportedAt")
					return
				}
				z.TeleportedAt = nil
			} else {
				if z.TeleportedAt == nil {
					z.TeleportedAt = new(time.Time)
				}
				*z.TeleportedAt, err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "TeleportedAt")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Player) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(28)
	var zb0001Mask uint32 /* 28 bits */
	_ = zb0001Mask
	if z.Name == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Color == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.JoinedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Status == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.HP == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Position == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Velocity == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.Angle == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.MoveDirection == "" {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.RotationDirection == 0 {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.Boosting == false {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.Kills == 0 {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.Deaths == 0 {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.DeathPosition == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.DeadAt == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.SpawnedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.Hook == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.UsedHookAt == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.HookedBy == "" {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.Blinking == false {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.BlinkedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	if z.Blinked == false {
		zb0001Len--
		zb0001Mask |= 0x400000
	}
	if z.Teleporting == false {
		zb0001Len--
		zb0001Mask |= 0x800000
	}
	if z.FromPortalID == "" {
		zb0001Len--
		zb0001Mask |= 0x1000000
	}
	if z.ToPortalID == "" {
		zb0001Len--
		zb0001Mask |= 0x2000000
	}
	if z.Teleported == false {
		zb0001Len--
		zb0001Mask |= 0x4000000
	}
	if z.TeleportedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x8000000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "id"
		err = en.Append(0xa2, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.ID)
		if err != nil {
			err = msgp.WrapError(err, "ID")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "n"
			err = en.Append(0xa1, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteString(z.Name)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "clr"
			err = en.Append(0xa3, 0x63, 0x6c, 0x72)
			if err != nil {
				return
			}
			if z.Color == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Color.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Color")
					return
				}
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "ja"
			err = en.Append(0xa2, 0x6a, 0x61)
			if err != nil {
				return
			}
			if z.JoinedAt == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = en.WriteTime(*z.JoinedAt)
				if err != nil {
					err = msgp.WrapError(err, "JoinedAt")
					return
				}
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// write "s"
			err = en.Append(0xa1, 0x73)
			if err != nil {
				return
			}
			err = en.WriteByte(byte(z.Status))
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "hp"
			err = en.Append(0xa2, 0x68, 0x70)
			if err != nil {
				return
			}
			err = en.WriteFloat64(z.HP)
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// write "pos"
			err = en.Append(0xa3, 0x70, 0x6f, 0x73)
			if err != nil {
				return
			}
			if z.Position == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Position.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// write "vel"
			err = en.Append(0xa3, 0x76, 0x65, 0x6c)
			if err != nil {
				return
			}
			if z.Velocity == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Velocity.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// write "ang"
			err = en.Append(0xa3, 0x61, 0x6e, 0x67)
			if err != nil {
				return
			}
			err = en.WriteFloat64(z.Angle)
			if err != nil {
				err = msgp.WrapError(err, "Angle")
				return
			}
		}
		if (zb0001Mask & 0x200) == 0 { // if not omitted
			// write "md"
			err = en.Append(0xa2, 0x6d, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.MoveDirection)
			if err != nil {
				err = msgp.WrapError(err, "MoveDirection")
				return
			}
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// write "rd"
			err = en.Append(0xa2, 0x72, 0x64)
			if err != nil {
				return
			}
			err = en.WriteByte(byte(z.RotationDirection))
			if err != nil {
				err = msgp.WrapError(err, "RotationDirection")
				return
			}
		}
		if (zb0001Mask & 0x800) == 0 { // if not omitted
			// write "b"
			err = en.Append(0xa1, 0x62)
			if err != nil {
				return
			}
			err = en.WriteBool(z.Boosting)
			if err != nil {
				err = msgp.WrapError(err, "Boosting")
				return
			}
		}
		if (zb0001Mask & 0x1000) == 0 { // if not omitted
			// write "kls"
			err = en.Append(0xa3, 0x6b, 0x6c, 0x73)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Kills)
			if err != nil {
				err = msgp.WrapError(err, "Kills")
				return
			}
		}
		if (zb0001Mask & 0x2000) == 0 { // if not omitted
			// write "dts"
			err = en.Append(0xa3, 0x64, 0x74, 0x73)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Deaths)
			if err != nil {
				err = msgp.WrapError(err, "Deaths")
				return
			}
		}
		if (zb0001Mask & 0x4000) == 0 { // if not omitted
			// write "dpos"
			err = en.Append(0xa4, 0x64, 0x70, 0x6f, 0x73)
			if err != nil {
				return
			}
			if z.DeathPosition == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.DeathPosition.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "DeathPosition")
					return
				}
			}
		}
		if (zb0001Mask & 0x8000) == 0 { // if not omitted
			// write "da"
			err = en.Append(0xa2, 0x64, 0x61)
			if err != nil {
				return
			}
			if z.DeadAt == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = en.WriteTime(*z.DeadAt)
				if err != nil {
					err = msgp.WrapError(err, "DeadAt")
					return
				}
			}
		}
		if (zb0001Mask & 0x10000) == 0 { // if not omitted
			// write "sa"
			err = en.Append(0xa2, 0x73, 0x61)
			if err != nil {
				return
			}
			if z.SpawnedAt == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = en.WriteTime(*z.SpawnedAt)
				if err != nil {
					err = msgp.WrapError(err, "SpawnedAt")
					return
				}
			}
		}
		if (zb0001Mask & 0x20000) == 0 { // if not omitted
			// write "hk"
			err = en.Append(0xa2, 0x68, 0x6b)
			if err != nil {
				return
			}
			if z.Hook == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Hook.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
			}
		}
		if (zb0001Mask & 0x40000) == 0 { // if not omitted
			// write "hka"
			err = en.Append(0xa3, 0x68, 0x6b, 0x61)
			if err != nil {
				return
			}
			if z.UsedHookAt == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = en.WriteTime(*z.UsedHookAt)
				if err != nil {
					err = msgp.WrapError(err, "UsedHookAt")
					return
				}
			}
		}
		if (zb0001Mask & 0x80000) == 0 { // if not omitted
			// write "hb"
			err = en.Append(0xa2, 0x68, 0x62)
			if err != nil {
				return
			}
			err = en.WriteString(z.HookedBy)
			if err != nil {
				err = msgp.WrapError(err, "HookedBy")
				return
			}
		}
		if (zb0001Mask & 0x100000) == 0 { // if not omitted
			// write "bl"
			err = en.Append(0xa2, 0x62, 0x6c)
			if err != nil {
				return
			}
			err = en.WriteBool(z.Blinking)
			if err != nil {
				err = msgp.WrapError(err, "Blinking")
				return
			}
		}
		if (zb0001Mask & 0x200000) == 0 { // if not omitted
			// write "bla"
			err = en.Append(0xa3, 0x62, 0x6c, 0x61)
			if err != nil {
				return
			}
			if z.BlinkedAt == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = en.WriteTime(*z.BlinkedAt)
				if err != nil {
					err = msgp.WrapError(err, "BlinkedAt")
					return
				}
			}
		}
		if (zb0001Mask & 0x400000) == 0 { // if not omitted
			// write "bld"
			err = en.Append(0xa3, 0x62, 0x6c, 0x64)
			if err != nil {
				return
			}
			err = en.WriteBool(z.Blinked)
			if err != nil {
				err = msgp.WrapError(err, "Blinked")
				return
			}
		}
		if (zb0001Mask & 0x800000) == 0 { // if not omitted
			// write "tlp"
			err = en.Append(0xa3, 0x74, 0x6c, 0x70)
			if err != nil {
				return
			}
			err = en.WriteBool(z.Teleporting)
			if err != nil {
				err = msgp.WrapError(err, "Teleporting")
				return
			}
		}
		if (zb0001Mask & 0x1000000) == 0 { // if not omitted
			// write "depp"
			err = en.Append(0xa4, 0x64, 0x65, 0x70, 0x70)
			if err != nil {
				return
			}
			err = en.WriteString(z.FromPortalID)
			if err != nil {
				err = msgp.WrapError(err, "FromPortalID")
				return
			}
		}
		if (zb0001Mask & 0x2000000) == 0 { // if not omitted
			// write "arrp"
			err = en.Append(0xa4, 0x61, 0x72, 0x72, 0x70)
			if err != nil {
				return
			}
			err = en.WriteString(z.ToPortalID)
			if err != nil {
				err = msgp.WrapError(err, "ToPortalID")
				return
			}
		}
		if (zb0001Mask & 0x4000000) == 0 { // if not omitted
			// write "tld"
			err = en.Append(0xa3, 0x74, 0x6c, 0x64)
			if err != nil {
				return
			}
			err = en.WriteBool(z.Teleported)
			if err != nil {
				err = msgp.WrapError(err, "Teleported")
				return
			}
		}
		if (zb0001Mask & 0x8000000) == 0 { // if not omitted
			// write "tla"
			err = en.Append(0xa3, 0x74, 0x6c, 0x61)
			if err != nil {
				return
			}
			if z.TeleportedAt == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = en.WriteTime(*z.TeleportedAt)
				if err != nil {
					err = msgp.WrapError(err, "TeleportedAt")
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Player) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(28)
	var zb0001Mask uint32 /* 28 bits */
	_ = zb0001Mask
	if z.Name == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Color == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.JoinedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Status == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.HP == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Position == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Velocity == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.Angle == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.MoveDirection == "" {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.RotationDirection == 0 {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.Boosting == false {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.Kills == 0 {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.Deaths == 0 {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.DeathPosition == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.DeadAt == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.SpawnedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.Hook == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.UsedHookAt == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.HookedBy == "" {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.Blinking == false {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.BlinkedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	if z.Blinked == false {
		zb0001Len--
		zb0001Mask |= 0x400000
	}
	if z.Teleporting == false {
		zb0001Len--
		zb0001Mask |= 0x800000
	}
	if z.FromPortalID == "" {
		zb0001Len--
		zb0001Mask |= 0x1000000
	}
	if z.ToPortalID == "" {
		zb0001Len--
		zb0001Mask |= 0x2000000
	}
	if z.Teleported == false {
		zb0001Len--
		zb0001Mask |= 0x4000000
	}
	if z.TeleportedAt == nil {
		zb0001Len--
		zb0001Mask |= 0x8000000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "id"
		o = append(o, 0xa2, 0x69, 0x64)
		o = msgp.AppendString(o, z.ID)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "n"
			o = append(o, 0xa1, 0x6e)
			o = msgp.AppendString(o, z.Name)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "clr"
			o = append(o, 0xa3, 0x63, 0x6c, 0x72)
			if z.Color == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Color.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Color")
					return
				}
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "ja"
			o = append(o, 0xa2, 0x6a, 0x61)
			if z.JoinedAt == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendTime(o, *z.JoinedAt)
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "s"
			o = append(o, 0xa1, 0x73)
			o = msgp.AppendByte(o, byte(z.Status))
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "hp"
			o = append(o, 0xa2, 0x68, 0x70)
			o = msgp.AppendFloat64(o, z.HP)
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// string "pos"
			o = append(o, 0xa3, 0x70, 0x6f, 0x73)
			if z.Position == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Position.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// string "vel"
			o = append(o, 0xa3, 0x76, 0x65, 0x6c)
			if z.Velocity == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Velocity.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// string "ang"
			o = append(o, 0xa3, 0x61, 0x6e, 0x67)
			o = msgp.AppendFloat64(o, z.Angle)
		}
		if (zb0001Mask & 0x200) == 0 { // if not omitted
			// string "md"
			o = append(o, 0xa2, 0x6d, 0x64)
			o = msgp.AppendString(o, z.MoveDirection)
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// string "rd"
			o = append(o, 0xa2, 0x72, 0x64)
			o = msgp.AppendByte(o, byte(z.RotationDirection))
		}
		if (zb0001Mask & 0x800) == 0 { // if not omitted
			// string "b"
			o = append(o, 0xa1, 0x62)
			o = msgp.AppendBool(o, z.Boosting)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not omitted
			// string "kls"
			o = append(o, 0xa3, 0x6b, 0x6c, 0x73)
			o = msgp.AppendInt(o, z.Kills)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not omitted
			// string "dts"
			o = append(o, 0xa3, 0x64, 0x74, 0x73)
			o = msgp.AppendInt(o, z.Deaths)
		}
		if (zb0001Mask & 0x4000) == 0 { // if not omitted
			// string "dpos"
			o = append(o, 0xa4, 0x64, 0x70, 0x6f, 0x73)
			if z.DeathPosition == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.DeathPosition.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "DeathPosition")
					return
				}
			}
		}
		if (zb0001Mask & 0x8000) == 0 { // if not omitted
			// string "da"
			o = append(o, 0xa2, 0x64, 0x61)
			if z.DeadAt == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendTime(o, *z.DeadAt)
			}
		}
		if (zb0001Mask & 0x10000) == 0 { // if not omitted
			// string "sa"
			o = append(o, 0xa2, 0x73, 0x61)
			if z.SpawnedAt == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendTime(o, *z.SpawnedAt)
			}
		}
		if (zb0001Mask & 0x20000) == 0 { // if not omitted
			// string "hk"
			o = append(o, 0xa2, 0x68, 0x6b)
			if z.Hook == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Hook.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
			}
		}
		if (zb0001Mask & 0x40000) == 0 { // if not omitted
			// string "hka"
			o = append(o, 0xa3, 0x68, 0x6b, 0x61)
			if z.UsedHookAt == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendTime(o, *z.UsedHookAt)
			}
		}
		if (zb0001Mask & 0x80000) == 0 { // if not omitted
			// string "hb"
			o = append(o, 0xa2, 0x68, 0x62)
			o = msgp.AppendString(o, z.HookedBy)
		}
		if (zb0001Mask & 0x100000) == 0 { // if not omitted
			// string "bl"
			o = append(o, 0xa2, 0x62, 0x6c)
			o = msgp.AppendBool(o, z.Blinking)
		}
		if (zb0001Mask & 0x200000) == 0 { // if not omitted
			// string "bla"
			o = append(o, 0xa3, 0x62, 0x6c, 0x61)
			if z.BlinkedAt == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendTime(o, *z.BlinkedAt)
			}
		}
		if (zb0001Mask & 0x400000) == 0 { // if not omitted
			// string "bld"
			o = append(o, 0xa3, 0x62, 0x6c, 0x64)
			o = msgp.AppendBool(o, z.Blinked)
		}
		if (zb0001Mask & 0x800000) == 0 { // if not omitted
			// string "tlp"
			o = append(o, 0xa3, 0x74, 0x6c, 0x70)
			o = msgp.AppendBool(o, z.Teleporting)
		}
		if (zb0001Mask & 0x1000000) == 0 { // if not omitted
			// string "depp"
			o = append(o, 0xa4, 0x64, 0x65, 0x70, 0x70)
			o = msgp.AppendString(o, z.FromPortalID)
		}
		if (zb0001Mask & 0x2000000) == 0 { // if not omitted
			// string "arrp"
			o = append(o, 0xa4, 0x61, 0x72, 0x72, 0x70)
			o = msgp.AppendString(o, z.ToPortalID)
		}
		if (zb0001Mask & 0x4000000) == 0 { // if not omitted
			// string "tld"
			o = append(o, 0xa3, 0x74, 0x6c, 0x64)
			o = msgp.AppendBool(o, z.Teleported)
		}
		if (zb0001Mask & 0x8000000) == 0 { // if not omitted
			// string "tla"
			o = append(o, 0xa3, 0x74, 0x6c, 0x61)
			if z.TeleportedAt == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendTime(o, *z.TeleportedAt)
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Player) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "n":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "clr":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Color = nil
			} else {
				if z.Color == nil {
					z.Color = new(RGBA)
				}
				bts, err = z.Color.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Color")
					return
				}
			}
		case "ja":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.JoinedAt = nil
			} else {
				if z.JoinedAt == nil {
					z.JoinedAt = new(time.Time)
				}
				*z.JoinedAt, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "JoinedAt")
					return
				}
			}
		case "s":
			{
				var zb0002 byte
				zb0002, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = PlayerStatus(zb0002)
			}
		case "hp":
			z.HP, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
		case "pos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Position = nil
			} else {
				if z.Position == nil {
					z.Position = new(Vector)
				}
				bts, err = z.Position.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		case "vel":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Velocity = nil
			} else {
				if z.Velocity == nil {
					z.Velocity = new(Vector)
				}
				bts, err = z.Velocity.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		case "ang":
			z.Angle, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Angle")
				return
			}
		case "md":
			z.MoveDirection, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MoveDirection")
				return
			}
		case "rd":
			{
				var zb0003 byte
				zb0003, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RotationDirection")
					return
				}
				z.RotationDirection = Direction(zb0003)
			}
		case "b":
			z.Boosting, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Boosting")
				return
			}
		case "kls":
			z.Kills, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kills")
				return
			}
		case "dts":
			z.Deaths, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Deaths")
				return
			}
		case "dpos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DeathPosition = nil
			} else {
				if z.DeathPosition == nil {
					z.DeathPosition = new(Vector)
				}
				bts, err = z.DeathPosition.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "DeathPosition")
					return
				}
			}
		case "da":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DeadAt = nil
			} else {
				if z.DeadAt == nil {
					z.DeadAt = new(time.Time)
				}
				*z.DeadAt, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DeadAt")
					return
				}
			}
		case "sa":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SpawnedAt = nil
			} else {
				if z.SpawnedAt == nil {
					z.SpawnedAt = new(time.Time)
				}
				*z.SpawnedAt, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SpawnedAt")
					return
				}
			}
		case "hk":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Hook = nil
			} else {
				if z.Hook == nil {
					z.Hook = new(Hook)
				}
				bts, err = z.Hook.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Hook")
					return
				}
			}
		case "hka":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.UsedHookAt = nil
			} else {
				if z.UsedHookAt == nil {
					z.UsedHookAt = new(time.Time)
				}
				*z.UsedHookAt, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UsedHookAt")
					return
				}
			}
		case "hb":
			z.HookedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HookedBy")
				return
			}
		case "bl":
			z.Blinking, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Blinking")
				return
			}
		case "bla":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.BlinkedAt = nil
			} else {
				if z.BlinkedAt == nil {
					z.BlinkedAt = new(time.Time)
				}
				*z.BlinkedAt, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlinkedAt")
					return
				}
			}
		case "bld":
			z.Blinked, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Blinked")
				return
			}
		case "tlp":
			z.Teleporting, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Teleporting")
				return
			}
		case "depp":
			z.FromPortalID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FromPortalID")
				return
			}
		case "arrp":
			z.ToPortalID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ToPortalID")
				return
			}
		case "tld":
			z.Teleported, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Teleported")
				return
			}
		case "tla":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TeleportedAt = nil
			} else {
				if z.TeleportedAt == nil {
					z.TeleportedAt = new(time.Time)
				}
				*z.TeleportedAt, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TeleportedAt")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Player) Msgsize() (s int) {
	s = 3 + 3 + msgp.StringPrefixSize + len(z.ID) + 2 + msgp.StringPrefixSize + len(z.Name) + 4
	if z.Color == nil {
		s += msgp.NilSize
	} else {
		s += z.Color.Msgsize()
	}
	s += 3
	if z.JoinedAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	s += 2 + msgp.ByteSize + 3 + msgp.Float64Size + 4
	if z.Position == nil {
		s += msgp.NilSize
	} else {
		s += z.Position.Msgsize()
	}
	s += 4
	if z.Velocity == nil {
		s += msgp.NilSize
	} else {
		s += z.Velocity.Msgsize()
	}
	s += 4 + msgp.Float64Size + 3 + msgp.StringPrefixSize + len(z.MoveDirection) + 3 + msgp.ByteSize + 2 + msgp.BoolSize + 4 + msgp.IntSize + 4 + msgp.IntSize + 5
	if z.DeathPosition == nil {
		s += msgp.NilSize
	} else {
		s += z.DeathPosition.Msgsize()
	}
	s += 3
	if z.DeadAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	s += 3
	if z.SpawnedAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	s += 3
	if z.Hook == nil {
		s += msgp.NilSize
	} else {
		s += z.Hook.Msgsize()
	}
	s += 4
	if z.UsedHookAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	s += 3 + msgp.StringPrefixSize + len(z.HookedBy) + 3 + msgp.BoolSize + 4
	if z.BlinkedAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	s += 4 + msgp.BoolSize + 4 + msgp.BoolSize + 5 + msgp.StringPrefixSize + len(z.FromPortalID) + 5 + msgp.StringPrefixSize + len(z.ToPortalID) + 4 + msgp.BoolSize + 4
	if z.TeleportedAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PlayerStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PlayerStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PlayerStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PlayerStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PlayerStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PlayerStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PlayerStatus) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}
