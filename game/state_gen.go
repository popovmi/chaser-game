package game

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Brick) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
				z.Position = nil
			} else {
				if z.Position == nil {
					z.Position = new(Vector)
				}
				err = z.Position.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		case "w":
			z.Width, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Width")
				return
			}
		case "h":
			z.Height, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "a":
			z.Angle, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Angle")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Brick) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.Position == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Width == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Height == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Angle == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "pos"
			err = en.Append(0xa3, 0x70, 0x6f, 0x73)
			if err != nil {
				return
			}
			if z.Position == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Position.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "w"
			err = en.Append(0xa1, 0x77)
			if err != nil {
				return
			}
			err = en.WriteFloat64(z.Width)
			if err != nil {
				err = msgp.WrapError(err, "Width")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "h"
			err = en.Append(0xa1, 0x68)
			if err != nil {
				return
			}
			err = en.WriteFloat64(z.Height)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "a"
			err = en.Append(0xa1, 0x61)
			if err != nil {
				return
			}
			err = en.WriteFloat64(z.Angle)
			if err != nil {
				err = msgp.WrapError(err, "Angle")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Brick) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.Position == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Width == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Height == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Angle == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "pos"
			o = append(o, 0xa3, 0x70, 0x6f, 0x73)
			if z.Position == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Position.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "w"
			o = append(o, 0xa1, 0x77)
			o = msgp.AppendFloat64(o, z.Width)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "h"
			o = append(o, 0xa1, 0x68)
			o = msgp.AppendFloat64(o, z.Height)
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "a"
			o = append(o, 0xa1, 0x61)
			o = msgp.AppendFloat64(o, z.Angle)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Brick) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Position = nil
			} else {
				if z.Position == nil {
					z.Position = new(Vector)
				}
				bts, err = z.Position.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Position")
					return
				}
			}
		case "w":
			z.Width, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Width")
				return
			}
		case "h":
			z.Height, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "a":
			z.Angle, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Angle")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Brick) Msgsize() (s int) {
	s = 1 + 4
	if z.Position == nil {
		s += msgp.NilSize
	} else {
		s += z.Position.Msgsize()
	}
	s += 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *State) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ps":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if z.Players == nil {
				z.Players = make(map[string]*Player, zb0002)
			} else if len(z.Players) > 0 {
				for key := range z.Players {
					delete(z.Players, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *Player
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Players")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Player)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
				z.Players[za0001] = za0002
			}
		case "pn":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "PortalNetwork")
					return
				}
				z.PortalNetwork = nil
			} else {
				if z.PortalNetwork == nil {
					z.PortalNetwork = new(PortalNetwork)
				}
				err = z.PortalNetwork.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "PortalNetwork")
					return
				}
			}
		case "br":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bricks")
				return
			}
			if cap(z.Bricks) >= int(zb0003) {
				z.Bricks = (z.Bricks)[:zb0003]
			} else {
				z.Bricks = make([]*Brick, zb0003)
			}
			for za0003 := range z.Bricks {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0003)
						return
					}
					z.Bricks[za0003] = nil
				} else {
					if z.Bricks[za0003] == nil {
						z.Bricks[za0003] = new(Brick)
					}
					err = z.Bricks[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0003)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *State) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Players == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.PortalNetwork == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Bricks == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "ps"
			err = en.Append(0xa2, 0x70, 0x73)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.Players)))
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			for za0001, za0002 := range z.Players {
				err = en.WriteString(za0001)
				if err != nil {
					err = msgp.WrapError(err, "Players")
					return
				}
				if za0002 == nil {
					err = en.WriteNil()
					if err != nil {
						return
					}
				} else {
					err = za0002.EncodeMsg(en)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "pn"
			err = en.Append(0xa2, 0x70, 0x6e)
			if err != nil {
				return
			}
			if z.PortalNetwork == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.PortalNetwork.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "PortalNetwork")
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "br"
			err = en.Append(0xa2, 0x62, 0x72)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Bricks)))
			if err != nil {
				err = msgp.WrapError(err, "Bricks")
				return
			}
			for za0003 := range z.Bricks {
				if z.Bricks[za0003] == nil {
					err = en.WriteNil()
					if err != nil {
						return
					}
				} else {
					err = z.Bricks[za0003].EncodeMsg(en)
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0003)
						return
					}
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *State) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Players == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.PortalNetwork == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Bricks == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "ps"
			o = append(o, 0xa2, 0x70, 0x73)
			o = msgp.AppendMapHeader(o, uint32(len(z.Players)))
			for za0001, za0002 := range z.Players {
				o = msgp.AppendString(o, za0001)
				if za0002 == nil {
					o = msgp.AppendNil(o)
				} else {
					o, err = za0002.MarshalMsg(o)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "pn"
			o = append(o, 0xa2, 0x70, 0x6e)
			if z.PortalNetwork == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.PortalNetwork.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "PortalNetwork")
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "br"
			o = append(o, 0xa2, 0x62, 0x72)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Bricks)))
			for za0003 := range z.Bricks {
				if z.Bricks[za0003] == nil {
					o = msgp.AppendNil(o)
				} else {
					o, err = z.Bricks[za0003].MarshalMsg(o)
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0003)
						return
					}
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *State) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ps":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if z.Players == nil {
				z.Players = make(map[string]*Player, zb0002)
			} else if len(z.Players) > 0 {
				for key := range z.Players {
					delete(z.Players, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *Player
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Players")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Player)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
				z.Players[za0001] = za0002
			}
		case "pn":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.PortalNetwork = nil
			} else {
				if z.PortalNetwork == nil {
					z.PortalNetwork = new(PortalNetwork)
				}
				bts, err = z.PortalNetwork.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PortalNetwork")
					return
				}
			}
		case "br":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bricks")
				return
			}
			if cap(z.Bricks) >= int(zb0003) {
				z.Bricks = (z.Bricks)[:zb0003]
			} else {
				z.Bricks = make([]*Brick, zb0003)
			}
			for za0003 := range z.Bricks {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Bricks[za0003] = nil
				} else {
					if z.Bricks[za0003] == nil {
						z.Bricks[za0003] = new(Brick)
					}
					bts, err = z.Bricks[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0003)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *State) Msgsize() (s int) {
	s = 1 + 3 + msgp.MapHeaderSize
	if z.Players != nil {
		for za0001, za0002 := range z.Players {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += 3
	if z.PortalNetwork == nil {
		s += msgp.NilSize
	} else {
		s += z.PortalNetwork.Msgsize()
	}
	s += 3 + msgp.ArrayHeaderSize
	for za0003 := range z.Bricks {
		if z.Bricks[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += z.Bricks[za0003].Msgsize()
		}
	}
	return
}
