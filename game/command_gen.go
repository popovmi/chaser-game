package game

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Command) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "act":
			{
				var zb0002 byte
				zb0002, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "Action")
					return
				}
				z.Action = CommandAction(zb0002)
			}
		case "pid":
			z.PlayerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PlayerID")
				return
			}
		case "pld":
			z.Payload, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Command) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Action == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.PlayerID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "act"
			err = en.Append(0xa3, 0x61, 0x63, 0x74)
			if err != nil {
				return
			}
			err = en.WriteByte(byte(z.Action))
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "pid"
			err = en.Append(0xa3, 0x70, 0x69, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.PlayerID)
			if err != nil {
				err = msgp.WrapError(err, "PlayerID")
				return
			}
		}
		// write "pld"
		err = en.Append(0xa3, 0x70, 0x6c, 0x64)
		if err != nil {
			return
		}
		err = en.WriteIntf(z.Payload)
		if err != nil {
			err = msgp.WrapError(err, "Payload")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Command) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Action == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.PlayerID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "act"
			o = append(o, 0xa3, 0x61, 0x63, 0x74)
			o = msgp.AppendByte(o, byte(z.Action))
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "pid"
			o = append(o, 0xa3, 0x70, 0x69, 0x64)
			o = msgp.AppendString(o, z.PlayerID)
		}
		// string "pld"
		o = append(o, 0xa3, 0x70, 0x6c, 0x64)
		o, err = msgp.AppendIntf(o, z.Payload)
		if err != nil {
			err = msgp.WrapError(err, "Payload")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Command) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "act":
			{
				var zb0002 byte
				zb0002, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Action")
					return
				}
				z.Action = CommandAction(zb0002)
			}
		case "pid":
			z.PlayerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PlayerID")
				return
			}
		case "pld":
			z.Payload, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Command) Msgsize() (s int) {
	s = 1 + 4 + msgp.ByteSize + 4 + msgp.StringPrefixSize + len(z.PlayerID) + 4 + msgp.GuessSize(z.Payload)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CommandAction) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CommandAction(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CommandAction) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CommandAction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CommandAction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CommandAction(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CommandAction) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Commands) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Commands, zb0002)
	}
	for zb0001 := range *z {
		var field []byte
		_ = field
		var zb0003 uint32
		zb0003, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0003 > 0 {
			zb0003--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "act":
				{
					var zb0004 byte
					zb0004, err = dc.ReadByte()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Action")
						return
					}
					(*z)[zb0001].Action = CommandAction(zb0004)
				}
			case "pid":
				(*z)[zb0001].PlayerID, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "PlayerID")
					return
				}
			case "pld":
				(*z)[zb0001].Payload, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Payload")
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Commands) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0005 := range z {
		// check for omitted fields
		zb0001Len := uint32(3)
		var zb0001Mask uint8 /* 3 bits */
		_ = zb0001Mask
		if z[zb0005].Action == 0 {
			zb0001Len--
			zb0001Mask |= 0x1
		}
		if z[zb0005].PlayerID == "" {
			zb0001Len--
			zb0001Mask |= 0x2
		}
		// variable map header, size zb0001Len
		err = en.Append(0x80 | uint8(zb0001Len))
		if err != nil {
			return
		}

		// skip if no fields are to be emitted
		if zb0001Len != 0 {
			if (zb0001Mask & 0x1) == 0 { // if not omitted
				// write "act"
				err = en.Append(0xa3, 0x61, 0x63, 0x74)
				if err != nil {
					return
				}
				err = en.WriteByte(byte(z[zb0005].Action))
				if err != nil {
					err = msgp.WrapError(err, zb0005, "Action")
					return
				}
			}
			if (zb0001Mask & 0x2) == 0 { // if not omitted
				// write "pid"
				err = en.Append(0xa3, 0x70, 0x69, 0x64)
				if err != nil {
					return
				}
				err = en.WriteString(z[zb0005].PlayerID)
				if err != nil {
					err = msgp.WrapError(err, zb0005, "PlayerID")
					return
				}
			}
			// write "pld"
			err = en.Append(0xa3, 0x70, 0x6c, 0x64)
			if err != nil {
				return
			}
			err = en.WriteIntf(z[zb0005].Payload)
			if err != nil {
				err = msgp.WrapError(err, zb0005, "Payload")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Commands) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0005 := range z {
		// check for omitted fields
		zb0001Len := uint32(3)
		var zb0001Mask uint8 /* 3 bits */
		_ = zb0001Mask
		if z[zb0005].Action == 0 {
			zb0001Len--
			zb0001Mask |= 0x1
		}
		if z[zb0005].PlayerID == "" {
			zb0001Len--
			zb0001Mask |= 0x2
		}
		// variable map header, size zb0001Len
		o = append(o, 0x80|uint8(zb0001Len))

		// skip if no fields are to be emitted
		if zb0001Len != 0 {
			if (zb0001Mask & 0x1) == 0 { // if not omitted
				// string "act"
				o = append(o, 0xa3, 0x61, 0x63, 0x74)
				o = msgp.AppendByte(o, byte(z[zb0005].Action))
			}
			if (zb0001Mask & 0x2) == 0 { // if not omitted
				// string "pid"
				o = append(o, 0xa3, 0x70, 0x69, 0x64)
				o = msgp.AppendString(o, z[zb0005].PlayerID)
			}
			// string "pld"
			o = append(o, 0xa3, 0x70, 0x6c, 0x64)
			o, err = msgp.AppendIntf(o, z[zb0005].Payload)
			if err != nil {
				err = msgp.WrapError(err, zb0005, "Payload")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Commands) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Commands, zb0002)
	}
	for zb0001 := range *z {
		var field []byte
		_ = field
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0003 > 0 {
			zb0003--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "act":
				{
					var zb0004 byte
					zb0004, bts, err = msgp.ReadByteBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Action")
						return
					}
					(*z)[zb0001].Action = CommandAction(zb0004)
				}
			case "pid":
				(*z)[zb0001].PlayerID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "PlayerID")
					return
				}
			case "pld":
				(*z)[zb0001].Payload, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Payload")
					return
				}
			default:
				bts, err = msgp.Skip(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Commands) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0005 := range z {
		s += 1 + 4 + msgp.ByteSize + 4 + msgp.StringPrefixSize + len(z[zb0005].PlayerID) + 4 + msgp.GuessSize(z[zb0005].Payload)
	}
	return
}
