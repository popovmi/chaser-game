package game

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Hook) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "EndPosition")
					return
				}
				z.EndPosition = nil
			} else {
				if z.EndPosition == nil {
					z.EndPosition = new(Vector)
				}
				err = z.EndPosition.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "EndPosition")
					return
				}
			}
		case "v":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
				z.Velocity = nil
			} else {
				if z.Velocity == nil {
					z.Velocity = new(Vector)
				}
				err = z.Velocity.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		case "s":
			z.Stuck, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Stuck")
				return
			}
		case "r":
			z.Returning, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Returning")
				return
			}
		case "hpi":
			z.HookedPlayerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "HookedPlayerID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Hook) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.EndPosition == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Velocity == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Stuck == false {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Returning == false {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.HookedPlayerID == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "e"
			err = en.Append(0xa1, 0x65)
			if err != nil {
				return
			}
			if z.EndPosition == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.EndPosition.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "EndPosition")
					return
				}
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "v"
			err = en.Append(0xa1, 0x76)
			if err != nil {
				return
			}
			if z.Velocity == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Velocity.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "s"
			err = en.Append(0xa1, 0x73)
			if err != nil {
				return
			}
			err = en.WriteBool(z.Stuck)
			if err != nil {
				err = msgp.WrapError(err, "Stuck")
				return
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "r"
			err = en.Append(0xa1, 0x72)
			if err != nil {
				return
			}
			err = en.WriteBool(z.Returning)
			if err != nil {
				err = msgp.WrapError(err, "Returning")
				return
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// write "hpi"
			err = en.Append(0xa3, 0x68, 0x70, 0x69)
			if err != nil {
				return
			}
			err = en.WriteString(z.HookedPlayerID)
			if err != nil {
				err = msgp.WrapError(err, "HookedPlayerID")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Hook) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.EndPosition == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Velocity == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Stuck == false {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Returning == false {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.HookedPlayerID == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "e"
			o = append(o, 0xa1, 0x65)
			if z.EndPosition == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.EndPosition.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "EndPosition")
					return
				}
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "v"
			o = append(o, 0xa1, 0x76)
			if z.Velocity == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Velocity.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "s"
			o = append(o, 0xa1, 0x73)
			o = msgp.AppendBool(o, z.Stuck)
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "r"
			o = append(o, 0xa1, 0x72)
			o = msgp.AppendBool(o, z.Returning)
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "hpi"
			o = append(o, 0xa3, 0x68, 0x70, 0x69)
			o = msgp.AppendString(o, z.HookedPlayerID)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Hook) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.EndPosition = nil
			} else {
				if z.EndPosition == nil {
					z.EndPosition = new(Vector)
				}
				bts, err = z.EndPosition.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "EndPosition")
					return
				}
			}
		case "v":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Velocity = nil
			} else {
				if z.Velocity == nil {
					z.Velocity = new(Vector)
				}
				bts, err = z.Velocity.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Velocity")
					return
				}
			}
		case "s":
			z.Stuck, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Stuck")
				return
			}
		case "r":
			z.Returning, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Returning")
				return
			}
		case "hpi":
			z.HookedPlayerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HookedPlayerID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Hook) Msgsize() (s int) {
	s = 1 + 2
	if z.EndPosition == nil {
		s += msgp.NilSize
	} else {
		s += z.EndPosition.Msgsize()
	}
	s += 2
	if z.Velocity == nil {
		s += msgp.NilSize
	} else {
		s += z.Velocity.Msgsize()
	}
	s += 2 + msgp.BoolSize + 2 + msgp.BoolSize + 4 + msgp.StringPrefixSize + len(z.HookedPlayerID)
	return
}
